#!/bin/bash

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

show_help() {
    echo "üöÄ Go Project Generator"
    echo
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:"
    echo "  gogen [options]"
    echo
    echo "–û–ø—Ü–∏–∏:"
    echo "  --help, -h          –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo "  --template          –®–∞–±–ª–æ–Ω –ø—Ä–æ–µ–∫—Ç–∞ (rest-api, graphql-api, cli-app, telegram-bot, grpc-service)"
    echo "  --arch              –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ (monolith, mvc, clean-arch, hexagonal)"
    echo "  --db                –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (postgres, mongodb, elasticsearch, redis, clickhouse)"
    echo "  --test              –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (testify, gomock, httptest, ginkgo)"
    echo "  --cicd              CI/CD (github-actions, gitlab-ci, jenkins)"
    echo "  --monitoring        –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (prometheus, jaeger, elk)"
    echo "  --docs              –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è (swagger, godoc, markdown)"
    echo "  --security          –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (jwt, oauth2, cors, rate-limit)"
    echo "  --config            –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (yaml, env, etcd, consul)"
    echo
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  gogen                                    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º"
    echo "  gogen --template rest-api --arch mvc     # –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ REST API —Å MVC"
    echo "  gogen --help                            # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"
}

while [[ $# -gt 0 ]]; do
    case $1 in
        --help|-h)
            show_help
            exit 0
            ;;
        --template)
            TEMPLATE="$2"
            shift 2
            ;;
        --arch)
            ARCH="$2"
            shift 2
            ;;
        --db)
            DB="$2"
            shift 2
            ;;
        --test)
            TEST="$2"
            shift 2
            ;;
        --cicd)
            CICD="$2"
            shift 2
            ;;
        --monitoring)
            MONITORING="$2"
            shift 2
            ;;
        --docs)
            DOCS="$2"
            shift 2
            ;;
        --security)
            SECURITY="$2"
            shift 2
            ;;
        --config)
            CONFIG="$2"
            shift 2
            ;;
        *)
            echo "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $1"
            show_help
            exit 1
            ;;
    esac
done

if [ -z "$TEMPLATE" ] && [ -z "$ARCH" ] && [ -z "$DB" ] && [ -z "$TEST" ] && \
   [ -z "$CICD" ] && [ -z "$MONITORING" ] && [ -z "$DOCS" ] && [ -z "$SECURITY" ] && \
   [ -z "$CONFIG" ]; then
    source "$SCRIPT_DIR/scripts/setup_questionnaire.sh"
else
    PROJECT_TEMPLATE="$TEMPLATE"
    ARCHITECTURE="$ARCH"
    DATABASES_SELECTED="$DB"
    TEST_TOOLS_SELECTED="$TEST"
    CICD_SELECTED="$CICD"
    MONITORING_SELECTED="$MONITORING"
    DOC_TOOLS_SELECTED="$DOCS"
    SECURITY_SELECTED="$SECURITY"
    CONFIG_SELECTED="$CONFIG"
fi

CURRENT_DIR="$(pwd)"

echo "üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞..."
echo "üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $CURRENT_DIR"
echo "üìù –®–∞–±–ª–æ–Ω: $PROJECT_TEMPLATE"
echo "üèóÔ∏è  –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: $ARCHITECTURE"

case "$ARCHITECTURE" in
    *"–ú–æ–Ω–æ–ª–∏—Ç"*|*"Monolith"*)
        bash "$SCRIPT_DIR/scripts/setup_monolith.sh" "$CURRENT_DIR"
        ;;
    *"MVC"*)
        bash "$SCRIPT_DIR/scripts/setup_mvc.sh" "$CURRENT_DIR"
        ;;
    *"Clean"*)
        bash "$SCRIPT_DIR/scripts/setup_clean_arch.sh" "$CURRENT_DIR"
        ;;
    *"Hexagonal"*)
        bash "$SCRIPT_DIR/scripts/setup_hexagonal.sh" "$CURRENT_DIR"
        ;;
    *)
        echo "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: $ARCHITECTURE"
        exit 1
        ;;
esac

bash "$SCRIPT_DIR/scripts/setup_packages.sh" "$CURRENT_DIR"

if [[ "$MONITORING_SELECTED" == *"Prometheus"* ]] || [[ "$DATABASES_SELECTED" == *"Redis"* ]]; then
    bash "$SCRIPT_DIR/scripts/setup_docker.sh" "y" "y"
fi

bash "$SCRIPT_DIR/scripts/setup_linter.sh"

echo "‚ú® –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: $CURRENT_DIR"